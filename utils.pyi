"""
This type stub file was generated by cyright.
"""

import pandas as pd
from typing import Any, Generator

CPU_COUNT = ...
FREQ_CONFIG = ...
FREQ_MAP = ...
WAVELETS = ...
def yield_data(pickle_file_path=...) -> Generator[dict[str, Any], Any, None]:
    """
    Generator function to yield objects one at a time from a pickle file.

    Args:
        pickle_file_path (str): Path to the pickle file.

    Yields:
        dict: A dictionary with file name, df, freq as keys.

    Raises:
        FileNotFoundError: If the pickle file doesn't exist.
        pickle.UnpicklingError: If the pickle file is corrupted.
    """
    ...

def prepare_time_series(df, frequency) -> Generator[pd.DataFrame, Any, None]:
    """
    Generator function to yield individual time series DataFrames from a DataFrame with series_value lists.

    Args:
        df (pd.DataFrame): DataFrame with series_name, start_timestamp, series_value.
        frequency (str): Frequency of the series (e.g., '4_seconds', 'half_hourly', 'daily').

    Yields:
        pd.DataFrame: A DataFrame with timestamps as index and a single column for the series.
    """
    ...

def infer_time_series_params(series: pd.Series, frequency: str, min_length: int = ...) -> dict:
    """
    Infer optimal parameters for time series analysis and forecasting, ensuring parameters
    do not exceed series length constraints (len(series) > 100 * parameter).

    Args:
        series (pd.Series): Input time series with timestamps as index.
        frequency (str): Data frequency (e.g., 'daily', 'hourly', '4_seconds').
        min_length (int): Minimum series length for parameter inference.

    Returns:
        dict: Inferred parameters including lags, rolling_windows, seasonal_period,
              fft_window, micro_window, and tsfel_window.
    """
    ...

def extract_datetime_features(series: pd.Series, config: dict, frequency) -> pd.DataFrame:
    """Extract datetime-based features from series index."""
    ...

def extract_lag_features(series: pd.Series, config: dict, frequency) -> pd.DataFrame:
    """Generate lag features using config['lags']."""
    ...

def extract_rolling_features(series: pd.Series, config: dict, frequency) -> pd.DataFrame:
    """Calculate rolling window statistics."""
    ...

def extract_seasonal_features(series: pd.Series, config: dict, frequency: str) -> pd.DataFrame:
    """Perform seasonal decomposition."""
    ...

def extract_emd_features(series: pd.Series, config: dict, frequency: str) -> pd.DataFrame:
    """Empirical Mode Decomposition features."""
    ...

def extract_arima_features(series: pd.Series, config: dict, frequency: str) -> pd.DataFrame:
    """ARIMA model residuals."""
    ...

def extract_tsfel_features(series: pd.Series, config: dict, frequency: str) -> pd.DataFrame:
    """TSFEL features."""
    ...

def extract_fft_features(series: pd.Series, config: dict, frequency: str) -> pd.DataFrame:
    """FFT features."""
    ...

def extract_wavelet_features(series: pd.Series, config: dict, frequency: str) -> pd.DataFrame:
    """Wavelet transform features."""
    ...

def extract_micro_fft_features(series: pd.Series, config: dict, frequency: str) -> pd.DataFrame:
    """Microstructure FFT features."""
    ...

def auto_featurize(df: pd.DataFrame, frequency: str) -> pd.DataFrame:
    """
    Parallelized feature extraction pipeline.
    Returns DataFrame with original data and extracted features.
    """
    ...

def test(): # -> None:
    ...

